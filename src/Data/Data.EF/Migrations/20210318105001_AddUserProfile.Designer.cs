// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vostok.Hotline.Data.EF.DbStorage.Core;

namespace Vostok.Hotline.Data.EF.Migrations
{
    [DbContext(typeof(HotlineCoreContext))]
    [Migration("20210318105001_AddUserProfile")]
    partial class AddUserProfile
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Vostok.Hotline.Data.EF.Entities.Core.EnvironmentSetting", b =>
                {
                    b.Property<string>("EnvironmentKey")
                        .HasColumnName("environmentKey")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("createdOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnvironmentValue")
                        .HasColumnName("environmentValue")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<Guid?>("SessionId")
                        .HasColumnName("sessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("updatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("version")
                        .HasColumnType("rowversion");

                    b.HasKey("EnvironmentKey");

                    b.ToTable("EnvironmentSettings");
                });

            modelBuilder.Entity("Vostok.Hotline.Data.EF.Entities.Core.LoggingRequest", b =>
                {
                    b.Property<int>("LoggingRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("loggingRequestId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("createdOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasError")
                        .HasColumnName("hasError")
                        .HasColumnType("bit");

                    b.Property<int?>("LoggingOperationType")
                        .HasColumnName("loggingOperationType")
                        .HasColumnType("int");

                    b.Property<int>("LoggingSystemType")
                        .HasColumnName("loggingSystemType")
                        .HasColumnType("int");

                    b.Property<string>("RequestValue")
                        .HasColumnName("requestValue")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("ResponseValue")
                        .HasColumnName("responseValue")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<Guid?>("SessionId")
                        .HasColumnName("sessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UniqueRequestId")
                        .HasColumnName("uniqueRequestId")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("updatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("version")
                        .HasColumnType("rowversion");

                    b.HasKey("LoggingRequestId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UniqueRequestId");

                    b.ToTable("LoggingRequests");
                });

            modelBuilder.Entity("Vostok.Hotline.Data.EF.Entities.Core.UserProfile", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("userId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Avatar")
                        .HasColumnName("avatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("createdOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar(48)")
                        .HasMaxLength(48)
                        .IsUnicode(false);

                    b.Property<string>("FullName")
                        .HasColumnName("fullName")
                        .HasColumnType("varchar(96)")
                        .HasMaxLength(96)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastDateLogin")
                        .HasColumnName("lastDateLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnName("login")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Position")
                        .HasColumnName("position")
                        .HasColumnType("varchar(48)")
                        .HasMaxLength(48)
                        .IsUnicode(false);

                    b.Property<Guid?>("SessionId")
                        .HasColumnName("sessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SuccessfulDateLogin")
                        .HasColumnName("successfulDateLogin")
                        .HasColumnType("datetime2");

                    b.Property<byte>("UnSuccessfulLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("unSuccessfulLogin")
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("updatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("version")
                        .HasColumnType("rowversion");

                    b.HasKey("UserId");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("SessionId");

                    b.ToTable("UserProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
